# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openmoc_opencl', [dirname(__file__)])
        except ImportError:
            import _openmoc_opencl
            return _openmoc_opencl
        if fp is not None:
            try:
                _mod = imp.load_module('_openmoc_opencl', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openmoc_opencl = swig_import_helper()
    del swig_import_helper
else:
    import _openmoc_opencl
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


FOUR_PI = _openmoc_opencl.FOUR_PI
ONE_OVER_FOUR_PI = _openmoc_opencl.ONE_OVER_FOUR_PI
class Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openmoc_opencl.delete_Solver
    __del__ = lambda self : None;
    def getGeometry(self): return _openmoc_opencl.Solver_getGeometry(self)
    def getTrackGenerator(self): return _openmoc_opencl.Solver_getTrackGenerator(self)
    def getNumPolarAngles(self): return _openmoc_opencl.Solver_getNumPolarAngles(self)
    def getPolarQuadratureType(self): return _openmoc_opencl.Solver_getPolarQuadratureType(self)
    def getNumIterations(self): return _openmoc_opencl.Solver_getNumIterations(self)
    def getTotalTime(self): return _openmoc_opencl.Solver_getTotalTime(self)
    def getKeff(self): return _openmoc_opencl.Solver_getKeff(self)
    def getSourceConvergenceThreshold(self): return _openmoc_opencl.Solver_getSourceConvergenceThreshold(self)
    def isUsingSinglePrecision(self): return _openmoc_opencl.Solver_isUsingSinglePrecision(self)
    def isUsingDoublePrecision(self): return _openmoc_opencl.Solver_isUsingDoublePrecision(self)
    def isUsingExponentialInterpolation(self): return _openmoc_opencl.Solver_isUsingExponentialInterpolation(self)
    def isUsingExponentialIntrinsic(self): return _openmoc_opencl.Solver_isUsingExponentialIntrinsic(self)
    def getFSRScalarFlux(self, *args, **kwargs): return _openmoc_opencl.Solver_getFSRScalarFlux(self, *args, **kwargs)
    def getFSRScalarFluxes(self): return _openmoc_opencl.Solver_getFSRScalarFluxes(self)
    def getFSRSource(self, *args, **kwargs): return _openmoc_opencl.Solver_getFSRSource(self, *args, **kwargs)
    def setGeometry(self, *args, **kwargs): return _openmoc_opencl.Solver_setGeometry(self, *args, **kwargs)
    def setTrackGenerator(self, *args, **kwargs): return _openmoc_opencl.Solver_setTrackGenerator(self, *args, **kwargs)
    def setPolarQuadratureType(self, *args, **kwargs): return _openmoc_opencl.Solver_setPolarQuadratureType(self, *args, **kwargs)
    def setNumPolarAngles(self, *args, **kwargs): return _openmoc_opencl.Solver_setNumPolarAngles(self, *args, **kwargs)
    def setSourceConvergenceThreshold(self, *args, **kwargs): return _openmoc_opencl.Solver_setSourceConvergenceThreshold(self, *args, **kwargs)
    def useExponentialInterpolation(self): return _openmoc_opencl.Solver_useExponentialInterpolation(self)
    def useExponentialIntrinsic(self): return _openmoc_opencl.Solver_useExponentialIntrinsic(self)
    def convergeSource(self, *args, **kwargs): return _openmoc_opencl.Solver_convergeSource(self, *args, **kwargs)
    def computeFSRFissionRates(self, *args, **kwargs): return _openmoc_opencl.Solver_computeFSRFissionRates(self, *args, **kwargs)
    def printTimerReport(self): return _openmoc_opencl.Solver_printTimerReport(self)
    def initializeCmfd(self): return _openmoc_opencl.Solver_initializeCmfd(self)
Solver_swigregister = _openmoc_opencl.Solver_swigregister
Solver_swigregister(Solver)

MAX_POLAR_ANGLES = _openmoc_opencl.MAX_POLAR_ANGLES
MAX_AZIM_ANGLES = _openmoc_opencl.MAX_AZIM_ANGLES
class CLSolver(Solver):
    __swig_setmethods__ = {}
    for _s in [Solver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [Solver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLSolver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openmoc_opencl.delete_CLSolver
    __del__ = lambda self : None;
    def getFSRScalarFlux(self, *args, **kwargs): return _openmoc_opencl.CLSolver_getFSRScalarFlux(self, *args, **kwargs)
    def getFSRScalarFluxes(self): return _openmoc_opencl.CLSolver_getFSRScalarFluxes(self)
    def setNumThreadBlocks(self, *args, **kwargs): return _openmoc_opencl.CLSolver_setNumThreadBlocks(self, *args, **kwargs)
    def setNumThreadsPerBlock(self, *args, **kwargs): return _openmoc_opencl.CLSolver_setNumThreadsPerBlock(self, *args, **kwargs)
    def setGeometry(self, *args, **kwargs): return _openmoc_opencl.CLSolver_setGeometry(self, *args, **kwargs)
    def setTrackGenerator(self, *args, **kwargs): return _openmoc_opencl.CLSolver_setTrackGenerator(self, *args, **kwargs)
    def computeScalarTrackIndex(self, *args, **kwargs): return _openmoc_opencl.CLSolver_computeScalarTrackIndex(self, *args, **kwargs)
    def computeFSRFissionRates(self, *args, **kwargs): return _openmoc_opencl.CLSolver_computeFSRFissionRates(self, *args, **kwargs)
CLSolver_swigregister = _openmoc_opencl.CLSolver_swigregister
CLSolver_swigregister(CLSolver)


def machineContainsGPU():
  return _openmoc_opencl.machineContainsGPU()
machineContainsGPU = _openmoc_opencl.machineContainsGPU

def attachGPU(id=0):
  return _openmoc_opencl.attachGPU(id)
attachGPU = _openmoc_opencl.attachGPU

def printBasicGPUInfo():
  return _openmoc_opencl.printBasicGPUInfo()
printBasicGPUInfo = _openmoc_opencl.printBasicGPUInfo

def printDetailedGPUInfo():
  return _openmoc_opencl.printDetailedGPUInfo()
printDetailedGPUInfo = _openmoc_opencl.printDetailedGPUInfo

def getNumThreadsInWarp():
  return _openmoc_opencl.getNumThreadsInWarp()
getNumThreadsInWarp = _openmoc_opencl.getNumThreadsInWarp

def clCloneMaterial(*args, **kwargs):
  return _openmoc_opencl.clCloneMaterial(*args, **kwargs)
clCloneMaterial = _openmoc_opencl.clCloneMaterial

def clCloneTrackOnGPU(*args, **kwargs):
  return _openmoc_opencl.clCloneTrackOnGPU(*args, **kwargs)
clCloneTrackOnGPU = _openmoc_opencl.clCloneTrackOnGPU
# This file is compatible with both classic and new-style classes.


